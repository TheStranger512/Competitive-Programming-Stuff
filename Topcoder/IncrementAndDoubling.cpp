/* Solved
 * SRM 596 Div1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

struct IncrementAndDoubling {
  int getMin(vector<int> desiredArray);
};

typedef long long ll;
int dist[2222][15]; //number,doubles

int IncrementAndDoubling::getMin(vector<int> tar) {
  const int N = tar.size();
  sort(tar.begin(), tar.end());
  memset(dist, 0x3F, sizeof(dist));
  dist[0][0] = 0;
  for (int d = 0; d < 10; d++) {
    for (int i = 0; i <= 1000; i++) {
      dist[i + 1][d] = min(dist[i + 1][d], dist[i][d] + 1);
      dist[i << 1][d + 1] = min(dist[i << 1][d + 1], dist[i][d]);
    }
  }
  ll res = 1 << 30;
  for (int d = 0; d < 11; d++) {
    ll temp = 0;
    for (int i = 0; i < N; i++)
      temp += dist[tar[i]][d];
    res = min(res, temp + d);
  }
  return (int) res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}";
  cout << "]" << endl;
  IncrementAndDoubling *obj;
  int answer;
  obj = new IncrementAndDoubling();
  clock_t startTime = clock();
  answer = obj->getMin(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
#ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
#endif

  bool all_right;
  all_right = true;

  vector<int> p0;
  int p1;

  {
    // ----- test 0 -----
    int t0[] = { 2, 1 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = { 16, 16, 16 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 7;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = { 100 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 9;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = { 0, 0, 1, 0, 1 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 2;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = { 123, 234, 345, 456, 567, 789 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 40;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 5 -----
    int t0[] = { 7, 5, 8, 1, 8, 6, 6, 5, 3, 5, 5, 2, 8, 9, 9, 4, 6, 9, 4, 4, 1, 9, 9, 2, 8, 4, 7, 4,
        8, 8, 6, 3, 9, 4, 3, 4, 5, 1, 9, 8, 3, 8, 3, 7, 9, 3, 8, 4, 4, 7 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 84;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// You have an array with N elements.
// Initially, each element is 0.
// You can perform the following operations:
// 
// 
// 
// Increment operation: Choose one element of the array and increment the value by one.
// Doubling operation: Double the value of each element.
// 
// 
// 
// You are given a vector <int> desiredArray containing N elements.
// Compute and return the smallest possible number of operations needed to change the array from all zeros to desiredArray.
// 
// 
// DEFINITION
// Class:IncrementAndDoubling
// Method:getMin
// Parameters:vector <int>
// Returns:int
// Method signature:int getMin(vector <int> desiredArray)
// 
// 
// CONSTRAINTS
// -desiredArray will contain between 1 and 50 elements, inclusive.
// -Each element of desiredArray will be between 0 and 1,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2, 1}
// 
// Returns: 3
// 
// One of the optimal solutions is to apply increment operations to element 0 twice and then to element 1 once.
// Total number of operations is 3.
// 
// 
// 
// 1)
// {16, 16, 16}
// 
// Returns: 7
// 
// The optimum solution looks as follows.
// First, apply an increment operation to each element.
// Then apply the doubling operation four times.
// Total number of operations is 3+4=7.
// 
// 
// 
// 2)
// {100}
// 
// Returns: 9
// 
// 
// 
// 3)
// {0, 0, 1, 0, 1}
// 
// Returns: 2
// 
// Some elements in desiredArray may be zeros.
// 
// 4)
// {123, 234, 345, 456, 567, 789}
// 
// Returns: 40
// 
// 
// 
// 5)
// {7,5,8,1,8,6,6,5,3,5,5,2,8,9,9,4,6,9,4,4,1,9,9,2,8,4,7,4,8,8,6,3,9,4,3,4,5,1,9,8,3,8,3,7,9,3,8,4,4,7}
// 
// Returns: 84
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
