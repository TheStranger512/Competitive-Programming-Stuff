/*
 * Solved
 * SRM 567 Div2 Medium/Div 1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

#ifdef AZN
#include "Azn.cpp"
#endif

class TheSquareRootDilemma {
public:
  int countPairs(int N, int M);
} ;

int TheSquareRootDilemma::countPairs(int N, int M) {
  int ans = 0;
  vector<int> sqs;
  for (int i = 1; i * i <= 77777; i++)
    sqs.push_back(i * i);
  for (int i = 1; i <= N; i++) {
    int cur = i;
    for (int x = 1; x < (int) sqs.size() && cur > 1; x++)
      while (cur % sqs[x] == 0)
        cur /= sqs[x];
    for (int x = 0; x < (int) sqs.size() && sqs[x] * cur <= M; x++)
      ans++;
  }
  return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheSquareRootDilemma *obj;
	int answer;
	obj = new TheSquareRootDilemma();
	clock_t startTime = clock();
	answer = obj->countPairs(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
#ifdef AZN
freopen("output.txt", "w", stdout);
#endif

	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 1;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 8;
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 100;
	p1 = 100;
	p2 = 310;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 77777;
	p1 = 77777;
	all_right = KawigiEdit_RunTest(4, p0, p1, false, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Consider the function SSR (Squared Sum of square Roots) defined on two positive integer parameters: SSR(A, B) = (sqrt(A)+sqrt(B))^2. We are interested in the cases when the value of the function is also an integer.
//
// Given ints N and M, return the number of ordered pairs (A, B) such that 1 <= A <= N, 1 <= B <= M and SSR(A, B) is an integer.
//
// DEFINITION
// Class:TheSquareRootDilemma
// Method:countPairs
// Parameters:int, int
// Returns:int
// Method signature:int countPairs(int N, int M)
//
//
// NOTES
// -The answer to the problem is guaranteed to fit into signed 32-bit integer type under the given constraints.
//
//
// CONSTRAINTS
// -N will be between 1 and 77,777, inclusive.
// -M will be between 1 and 77,777, inclusive.
//
//
// EXAMPLES
//
// 0)
// 2
// 2
//
// Returns: 2
//
// Out of the four possible pairs (A, B), only two yield an integer result: SSR(1, 1) = 4 and SSR(2, 2) = 8.
// On the other hand, SSR(1, 2) = SSR(2, 1) = 3+2*sqrt(2), which is not an integer.
//
// 1)
// 10
// 1
//
// Returns: 3
//
// SSR(1, 1), SSR(4, 1) and SSR(9, 1) are integers.
//
// 2)
// 3
// 8
//
// Returns: 5
//
// The valid pairs are (1, 1), (1, 4), (2, 2), (2, 8) and (3, 3).
//
// 3)
// 100
// 100
//
// Returns: 310
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
