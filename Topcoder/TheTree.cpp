/* Solved
 * SRM 591 Div1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

struct TheTree {
  int maximumDiameter(vector<int> cnt);
};

int TheTree::maximumDiameter(vector<int> cnt) {
  int N = cnt.size(), res = N;
  reverse(cnt.begin(), cnt.end());
  cnt.push_back(0);
  reverse(cnt.begin(), cnt.end());
  for (int i = 0; i < N; i++) {
    for (int d = i + 1; d <= N; d++) {
      bool ok = true;
      for (int j = i + 1; j <= d; j++)
        ok &= cnt[j] >= 2;
      if (ok)
        res = max(res, N - i + d - i);
    }
  }
  return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheTree *obj;
	int answer;
	obj = new TheTree();
	clock_t startTime = clock();
	answer = obj->maximumDiameter(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
#ifdef AZN
freopen("output.txt", "w", stdout);
freopen("azn.txt", "w", stderr);
#endif

	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,1,2,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {4,2,1,3,2,5,7,2,4,5,2,3,1,13,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Manao is working in the Tree Research Center.
// It may come as a surprise that the trees they research are not the ones you can see in a park.
// Instead, they are researching special graphs.
// (See Notes for definitions of terms related to these trees.)
// 
// Manao's daily job is reconstructing trees, given some partial information about them.
// Today Manao faced a difficult task.
// He needed to find the maximum possible diameter of a tree, given the following information:
// 
// 
// Some vertex in the tree is called V.
// The distance between V and the farthest vertex from V is D.
// For each x between 1 and D, inclusive, Manao knows the number of vertices such that their distance from V is x.
// 
// 
// You are given a vector <int> cnt containing D strictly positive integers.
// For each i, the i-th element of cnt is equal to the number of vertices which have distance i+1 from V.
// Please help Manao with his task.
// Return the maximum possible diameter of a tree that matches the given information.
// 
// 
// DEFINITION
// Class:TheTree
// Method:maximumDiameter
// Parameters:vector <int>
// Returns:int
// Method signature:int maximumDiameter(vector <int> cnt)
// 
// 
// NOTES
// -A tree is a connected graph with no cycles. Note that each tree with N vertices has precisely N-1 edges.
// -The distance between two vertices of a tree is the smallest number of edges one has to traverse in order to get from one of the vertices to the other one.
// -The diameter of a tree is the maximum of all pairwise distances. In other words, the diameter is the distance between the two vertices that are the farthest away from each other.
// 
// 
// CONSTRAINTS
// -cnt will contain between 1 and 50 elements, inclusive.
// -Each element of cnt will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {3}
// 
// Returns: 2
// 
// The only tree that matches the given information is shown below. The vertex V is red.
// 
// 
// 
// 
// 1)
// {2, 2}
// 
// Returns: 4
// 
// There are two trees which correspond to the given partial information:
// 
// 
// 
// The tree on the left has diameter 3 and the tree on the right has diameter 4.
// 
// 2)
// {4, 1, 2, 4}
// 
// Returns: 5
// 
// This is one example of a tree that corresponds to the given constraints and has the largest possible diameter.
// 
// 
// 
// 3)
// {4, 2, 1, 3, 2, 5, 7, 2, 4, 5, 2, 3, 1, 13, 6}
// 
// Returns: 21
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
