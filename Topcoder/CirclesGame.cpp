/* Solved
 * SRM 561 Div1 Medium
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

struct CirclesGame {
  string whoCanWin(vector <int> x, vector <int> y, vector <int> r);
} ;

vector<int> x, y, r;

#define sqr(x) ((x)*(x))
#define SIZE(x) ((int)x.size())

bool incircle(int a, int b) {
  //is A in B
  return sqr(x[a] - x[b]) + sqr(y[a] - y[b]) <= sqr(r[b]) && r[a] <= r[b];
}

int par[55];
int len;
bool adj[55][55];
int nimber[55];

int rec(int at) {
  if (nimber[at] >= 0)
    return nimber[at];
  bool mex[55] = {false};
  int& res = nimber[at];
  for (int i = 0; i < len; i++) { //pick node to remove
    if (!incircle(i, at)) continue;
    int temp = 0;
    for (int j = 0; j < len; j++)
      if (j != at && j != i && incircle(j, at) && par[j] != -1 && incircle(i, par[j]) && !incircle(i, j))
        temp ^= rec(j);
    mex[temp] = true;
  }
  for (res = 0; mex[res]; res++);
  return res;
}

string CirclesGame::whoCanWin(vector <int> xx, vector <int> yy, vector <int> rr) {
  x = xx, y = yy, r = rr;
  len = xx.size();
  for (int i = 0; i < len; i++) {
    par[i] = -1;
    for (int j = 0; j < len; j++)
      if (i != j && incircle(i, j) && (par[i] == -1 || r[j] < r[par[i]]))
        par[i] = j;
  }
  memset(adj, false, sizeof (adj));
  for (int i = 0; i < len; i++)
    if (par[i] != -1)
      adj[par[i]][i] = true;
  memset(nimber, -1, sizeof (nimber));
  int xorsum = 0;
  for (int i = 0; i < len; i++)
    if (par[i] == -1)
      xorsum ^= rec(i);
  return xorsum == 0 ? "Bob" : "Alice";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof

bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p2.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p2[i];
  }
  cout << "}";
  cout << "]" << endl;
  CirclesGame *obj;
  string answer;
  obj = new CirclesGame();
  clock_t startTime = clock();
  answer = obj->whoCanWin(p0, p1, p2);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << "\"" << p3 << "\"" << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << "\"" << answer << "\"" << endl;
  if (hasAnswer) {
    res = answer == p3;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  }
  else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  }
  else if (hasAnswer) {
    cout << "Match :-)" << endl;
  }
  else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}

int main() {
  #ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
  #endif

  bool all_right;
  all_right = true;

  vector <int> p0;
  vector <int> p1;
  vector <int> p2;
  string p3;

  {
    // ----- test 0 -----
    int t0[] = {0};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {0};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {1};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Alice";
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = {0, 3};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {0, 0};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {1, 1};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Bob";
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = {0, 0, 5};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {0, 0, 0};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {1, 2, 1};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Alice";
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = {0, 0, 0, 10, 10, 20};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {0, 0, 0, 0, 0, 0};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {1, 2, 3, 1, 2, 1};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Bob";
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = {10, 20, 30, 40, 50, 60, 70, 80};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {8, 7, 6, 5, 4, 3, 2, 1};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {2, 2, 2, 2, 2, 2, 2, 2};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Bob";
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 5 -----
    int t0[] = {0, 3, 6, 9, 12, -4747, -4777};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {-5858, -5858, -5858, -5858, -5858, 777, 777};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {58, 1, 1, 1, 1, 44, 8};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Bob";
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 6 -----
    int t0[] = {5202, 5699, -7433, 5068, -9483, -684, -6593, 5108, -7813, 6823, 3267, -8222, -8547, 2878, 2413, 8557, 5149, 5073, -8638, -6108, 8097};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {8728, -7407, 4338, -8414, 7652, -3705, -984, 5976, -9180, -9119, 9301, 2398, 7915, 6205, 7665, 717, -9884, 11, -8579, -6903, -746};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    int t2[] = {4196, 9303, 7152, 5875, 2943, 788, 502, 416, 1958, 3174, 182, 1256, 1147, 444, 979, 65, 1040, 1233, 438, 175, 1140};
    p2.assign(t2, t2 + sizeof (t2) / sizeof (t2[0]));
    p3 = "Alice";
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  }
  else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Alice is playing a game with her old friend, Bob.
//
// There are n circles on a paper. The center of the i-th circle is (x[i], y[i]), and the radius is r[i].
// No two different circles share a common point on their boundary.
// However, it is allowed for circles to be located entirely within other circles.
// In the game, the players take alternating turns.
// Alice starts.
// In each move, the current player must:
//
// Choose a circle such that there is no red point strictly inside the circle.
// Pick one point that is strictly inside the chosen circle and color it red.
//
// If a player can't do such a move, he/she loses the game.
//
// You are given the vector <int>s x, y, and r that describe a set of circles with the above property.
// Return "Alice" (quotes for clarity) if Alice has a winning strategy for the given set of circles.
// Otherwise, return "Bob".
//
//
// DEFINITION
// Class:CirclesGame
// Method:whoCanWin
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:string
// Method signature:string whoCanWin(vector <int> x, vector <int> y, vector <int> r)
//
//
// NOTES
// -Points located on the boundary of a circle are not considered to be strictly inside that circle.
//
//
// CONSTRAINTS
// -x will contain between 1 and 50 elements, inclusive.
// -x, y, and r will each contain the same number of elements.
// -Each element in x will be between -10,000 and 10,000, inclusive.
// -Each element in y will be between -10,000 and 10,000, inclusive.
// -Each element in r will be between 1 and 10,000, inclusive.
// -No two circles intersect. That is, the boundaries of the given circles are pairwise disjoint.
//
//
// EXAMPLES
//
// 0)
// {0}
// {0}
// {1}
//
// Returns: "Alice"
//
// This test case has just one circle. Alice draws a red point anywhere inside the circle and Bob has no valid move.
//
// 1)
// {0, 3}
// {0, 0}
// {1, 1}
//
// Returns: "Bob"
//
// Two separate circles. Alice draws a red point in one of them, Bob draws a red point in another one, then Alice has no valid moves.
//
// 2)
// {0, 0, 5}
// {0, 0, 0}
// {1, 2, 1}
//
// Returns: "Alice"
//
// In her first move, Alice should draw a point within the circle 1, but so that it's not within the circle 0. (Both indices are 0-based.)
//
// 3)
// {0, 0, 0, 10, 10, 20}
// {0, 0, 0, 0, 0, 0}
// {1, 2, 3, 1, 2, 1}
//
// Returns: "Bob"
//
//
//
// 4)
// {10,20,30,40,50,60,70,80}
// {8,7,6,5,4,3,2,1}
// {2,2,2,2,2,2,2,2}
//
// Returns: "Bob"
//
//
//
// 5)
// {0, 3, 6, 9, 12, -4747, -4777}
// {-5858, -5858, -5858, -5858, -5858, 777, 777}
// {58, 1, 1, 1, 1, 44, 8}
//
// Returns: "Bob"
//
//
//
// 6)
// {5202, 5699, -7433, 5068, -9483, -684, -6593, 5108, -7813, 6823, 3267, -8222, -8547, 2878, 2413, 8557, 5149, 5073, -8638, -6108, 8097}
// {8728, -7407, 4338, -8414, 7652, -3705, -984, 5976, -9180, -9119, 9301, 2398, 7915, 6205, 7665, 717, -9884, 11, -8579, -6903, -746}
// {4196, 9303, 7152, 5875, 2943, 788, 502, 416, 1958, 3174, 182, 1256, 1147, 444, 979, 65, 1040, 1233, 438, 175, 1140}
//
// Returns: "Alice"
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
