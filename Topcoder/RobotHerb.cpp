/* Solved
 * SRM 570 Div1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

typedef long long llong;

struct RobotHerb {
  llong getdist(int T, vector <int> a);
} ;

const int dx[] = {0, 1, 0, -1};
const int dy[] = {1, 0, -1, 0};

llong RobotHerb::getdist(int T, vector <int> a) {
  llong ans[5][4] = {0};
  vector<int> stdir;
  stdir.push_back(0);
  int dir = 0;
  for (int x = 0; ; x++) {
    for (int i = 0; i < (int) a.size(); i++) {
      ans[x][dir] += a[i];
      dir = (dir + a[i]) % 4;
    }
    if (find(stdir.begin(), stdir.end(), dir) != stdir.end())
      break;
    stdir.push_back(dir);
  }
  llong total[4] = {0};
  int size = stdir.size();
  for (int i = 0; i < size; i++) {
    for (int d = 0; d < 4; d++) {
      total[d] += 1LL * (T / size) * ans[i][d];
      if (i < T % size)
        total[d] += ans[i][d];
    }
  }
  return abs(total[0] - total[2]) + abs(total[1] - total[3]);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof

bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, llong p2) {
  cout << "Test " << testNum << ": [" << p0 << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}";
  cout << "]" << endl;
  RobotHerb *obj;
  llong answer;
  obj = new RobotHerb();
  clock_t startTime = clock();
  answer = obj->getdist(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  }
  else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  }
  else if (hasAnswer) {
    cout << "Match :-)" << endl;
  }
  else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}

int main() {
  #ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
  #endif

  bool all_right;
  all_right = true;

  int p0;
  vector <int> p1;
  llong p2;

  {
    // ----- test 0 -----
    p0 = 1;
    int t1[] = {1, 2, 3};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 2ll;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 100;
    int t1[] = {1};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 0ll;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 5;
    int t1[] = {1, 1, 2};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 10ll;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 1000000000;
    int t1[] = {100};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 100000000000ll;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    p0 = 570;
    int t1[] = {2013, 2, 13, 314, 271, 1414, 1732};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 4112ll;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  }
  else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// Robot Herb is playing on an infinite square grid.
// At any moment, Herb stands on one of the squares and he faces one of the four cardinal directions.
// In his memory, Herb has a program.
// The program is a sequence of commands.
// For each i, the i-th of these commands has the following form:
//
// First move forward a[i] tiles.
// Then turn 90 degrees to the right, a[i] times in a row.
//
// Herb has decided to run the program T times.
// You are given the int T and the vector <int> a that describes Herb's program.
// Let A be the initial position of Herb and B be his position after the program was executed T times. Return the Manhattan distance between tiles A and B.
//
// DEFINITION
// Class:RobotHerb
// Method:getdist
// Parameters:int, vector <int>
// Returns:long long
// Method signature:long long getdist(int T, vector <int> a)
//
//
// NOTES
// -Let's introduce a Cartesian coordinate system on the grid so that each cardinal direction is parallel to one of the axes. The Manhattan distance between two tiles with centers at points (x1, y1) and (x2, y2) is defined as |x1-x2| + |y1-y2|.
//
//
// CONSTRAINTS
// -T will be between 1 and 1,000,000,000, inclusive.
// -a will contain between 1 and 50 elements, inclusive.
// -Each element of a will be between 1 and 10,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 1
// {1,2,3}
//
// Returns: 2
//
// Suppose that initially Herb stands on the tile with center at (0, 0) and faces the positive y direction. The program will get executed as follows:
//
//                        tile         direction
// After 1st command:     (0, 1)       positive x
// After 2nd command:     (2, 1)       negative x
// After 3rd command:     (-1, 1)      negative y
//
// The manhattan distance between the initial and the final positions is |-1| + |1| = 2.
//
// 1)
// 100
// {1}
//
// Returns: 0
//
//
//
// 2)
// 5
// {1,1,2}
//
// Returns: 10
//
//
//
// 3)
// 1000000000
// {100}
//
// Returns: 100000000000
//
// The answer doesn't fit into a 32-bit integer data type.
//
// 4)
// 570
// {2013,2,13,314,271,1414,1732}
//
// Returns: 4112
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
