/*
 * Solved
 * TCO 13 Round 1A Hard
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

struct DirectionBoard {
  int getMinimum(vector <string> board);
} ;

template<class Flow = int, class Cost = int>
struct MinCostFlow {

  struct Edge {
    int t;
    Flow f;
    Cost c;
    Edge*next, *rev;

    Edge(int _t, Flow _f, Cost _c, Edge * _next) :
    t(_t), f(_f), c(_c), next(_next) { }
  } ;

  vector<Edge*> E;

  int addV() {
    E.push_back((Edge*) 0);
    return E.size() - 1;
  }

  Edge * makeEdge(int s, int t, Flow f, Cost c) {
    return E[s] = new Edge(t, f, c, E[s]);
  }

  void addEdge(int s, int t, Flow f, Cost c) {
    Edge*e1 = makeEdge(s, t, f, c), *e2 = makeEdge(t, s, 0, -c);
    e1->rev = e2, e2->rev = e1;
  }

  pair<Flow, Cost> minCostFlow(int vs, int vt) { //flow,cost
    int n = E.size();
    Flow flow = 0;
    Cost cost = 0;
    const Cost MAX_COST = numeric_limits<Cost>::max();
    const Flow MAX_FLOW = numeric_limits<Flow>::max();
    //    const Cost MAX_COST = ~0U >> 1;
    //    const Flow MAX_FLOW = ~0U >> 1;
    for (; ; ) {
      vector<Cost> dist(n, MAX_COST);
      vector<Flow> am(n, 0);
      vector<Edge*> prev(n);
      vector<bool> inQ(n, false);
      queue<int> que;
      dist[vs] = 0;
      am[vs] = MAX_FLOW;
      que.push(vs);
      inQ[vs] = true;
      while (!que.empty()) {
        int u = que.front();
        Cost c = dist[u];
        que.pop();
        inQ[u] = false;
        for (Edge*e = E[u]; e; e = e->next)
          if (e->f > 0) {
            Cost nc = c + e->c;
            if (nc < dist[e->t]) {
              dist[e->t] = nc;
              prev[e->t] = e;
              am[e->t] = min(am[u], e->f);
              if (!inQ[e->t]) {
                que.push(e->t);
                inQ[e->t] = true;
              }
            }
          }
      }
      if (dist[vt] == MAX_COST)
        break;
      Flow by = am[vt];
      int u = vt;
      flow += by;
      cost += by * dist[vt];
      while (u != vs) {
        Edge*e = prev[u];
        e->f -= by;
        e->rev->f += by;
        u = e->rev->t;
      }
    }
    return make_pair(flow, cost);
  }
} ;

const int dx[] = {0, 1, 0, -1};
const int dy[] = {-1, 0, 1, 0};
int rows, cols;

int getdir(char c) {
  if (c == 'U') return 0;
  if (c == 'R') return 1;
  if (c == 'D') return 2;
  return 3;
}

int getnode(int r, int c) {
  return ((r + rows) % rows) * cols + ((c + cols) % cols);
}

int DirectionBoard::getMinimum(vector <string> board) {
  MinCostFlow<int, int> maxflow;
  rows = board.size();
  cols = board[0].size();
  int size = rows * cols;
  const int sink = size + size, source = sink + 1;
  for (int i = 0; i < size + size + 2; i++)
    maxflow.addV();
  for (int i = 0; i < size; i++) {
    maxflow.addEdge(source, i, 1, 0);
    maxflow.addEdge(i + size, sink, 1, 0);
  }
  for (int r = 0; r < rows; r++) {
    for (int c = 0; c < cols; c++) {
      int rdir = getdir(board[r][c]), from = getnode(r, c);
      for (int d = 0; d < 4; d++) {
        int to = getnode(r + dy[d], c + dx[d]);
        assert(0 <= to && to < size);
        maxflow.addEdge(from, to + size, 1, (d != rdir));
      }
    }
  }
  pair<int, int> ans = maxflow.minCostFlow(source, sink);
  //pln(maxflow.E.size(), ans);
  return ans.second;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof

bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << "\"" << p0[i] << "\"";
  }
  cout << "}";
  cout << "]" << endl;
  DirectionBoard *obj;
  int answer;
  obj = new DirectionBoard();
  clock_t startTime = clock();
  answer = obj->getMinimum(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  }
  else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  }
  else if (hasAnswer) {
    cout << "Match :-)" << endl;
  }
  else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}

int main() {
  #ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
  #endif

  bool all_right;
  all_right = true;

  vector <string> p0;
  int p1;

  {
    // ----- test 0 -----
    string t0[] = {"RRRD", "URDD", "UULD", "ULLL"};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    p1 = 0;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    string t0[] = {"RRRD", "URLL", "LRRR"};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    p1 = 2;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    string t0[] = {"RRD", "URD", "ULL"};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    p1 = 2;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    string t0[] = {"ULRLRD", "UDDLRR"};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    p1 = 4;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    string t0[] = {"UDLRLDLD", "DLDLLDLR", "LLLLLDLD", "UUURRRDD"};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    p1 = 9;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 5 -----
    string t0[] = {"UDUDUUDUDUDUDUR", "LLLLDUUDRDLUDRU", "DLLDLDURDURUDDL", "UDUDUUDUDUDUDUR", "LLLLDUUDRDLUDRU", "DLLDLDURDURUDDL", "UDUDUUDUDUDUDUR", "LLLLDUUUDDLUDRU", "DLLDLDURDURUDDL", "UDUDUUDUDUDUDUR", "LLLLDUUDRDLUDRU", "DLLDLDURDURUDDL", "UDUDUUDUDUDUDUR", "LLLLDUUDRDLUDRU", "RRRDLDURDURUDDR"};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    p1 = 73;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  }
  else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// A direction board is a matrix filled with arrows. Each arrow occupies one cell and points in one of the four directions: left, right, down, up. Each cell has two coordinates (row, column), starting with (0, 0) in the top left corner. Given a starting cell (r, c), you can move through the board in the following way. First, check the arrow in cell (r, c). If it points left, move left of the current cell, i.e. into cell(r, c - 1). For the right arrow, move to (r, c + 1). Up goes to (r - 1, c) and down to (r + 1, c). Each row and column of the board is cyclic, so whenever the new cell is outside the board, you appear on the other side. For example, moving left from (3, 0) on a board of size 5 by 5 results in appearing in cell (3, 4).
//
// You need a board such that for every starting cell you always return to it during the movement process. If the given board does not satisfy this condition, you can change the direction of the arrow in any cell. For example, look at the following boards. In the left one, one only returns to the initial cell when he begins in cells (1, 1), (1, 2), (2, 0), (2, 3). After redirecting two arrows, you obtain a board with the given property.
//
//
//
// Find the minimum number of arrow redirections which transforms the given board into a valid one.
//
// DEFINITION
// Class:DirectionBoard
// Method:getMinimum
// Parameters:vector <string>
// Returns:int
// Method signature:int getMinimum(vector <string> board)
//
//
// CONSTRAINTS
// -board will contain between 1 and 15 elements, inclusive.
// -Each element of board will contain between 1 and 15 characters, inclusive.
// -All elements of board will be of the same length.
// -Each element of board will consist of characters from the set {'L', 'R', 'U', 'D'} only.
//
//
// EXAMPLES
//
// 0)
// {"RRRD",
//  "URDD",
//  "UULD",
//  "ULLL"}
//
// Returns: 0
//
// This board is already good. No matter which cell you start in, you always you return to it.
//
// 1)
// {"RRRD",
//  "URLL",
//  "LRRR"}
//
// Returns: 2
//
// The example from the problem statement.
//
// 2)
// {"RRD",
//  "URD",
//  "ULL"}
//
// Returns: 2
//
// This board is not valid, because if one starts from (1, 1), he never returns to this cell. A possible solution with only two changes:
//
//
//
// 3)
// {"ULRLRD",
//  "UDDLRR"}
//
// Returns: 4
//
//
//
// 4)
// {"UDLRLDLD",
//  "DLDLLDLR",
//  "LLLLLDLD",
//  "UUURRRDD"}
//
// Returns: 9
//
//
//
// 5)
// {"UDUDUUDUDUDUDUR",
//  "LLLLDUUDRDLUDRU",
//  "DLLDLDURDURUDDL",
//  "UDUDUUDUDUDUDUR",
//  "LLLLDUUDRDLUDRU",
//  "DLLDLDURDURUDDL",
//  "UDUDUUDUDUDUDUR",
//  "LLLLDUUUDDLUDRU",
//  "DLLDLDURDURUDDL",
//  "UDUDUUDUDUDUDUR",
//  "LLLLDUUDRDLUDRU",
//  "DLLDLDURDURUDDL",
//  "UDUDUUDUDUDUDUR",
//  "LLLLDUUDRDLUDRU",
//  "RRRDLDURDURUDDR"}
//
//
// Returns: 73
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
