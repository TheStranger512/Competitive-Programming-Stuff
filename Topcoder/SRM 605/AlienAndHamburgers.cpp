/* Solved
 * SRM 605 Div1 Easy
 * Author: Andy Y.F. Huang (azneye)
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

struct AlienAndHamburgers {
  int getNumber(vector<int> type, vector<int> taste);
};

int AlienAndHamburgers::getNumber(vector<int> type, vector<int> taste) {
  const int N = type.size();
  vector<int> val[111];
  for (int i = 0; i < N; i++)
    val[type[i]].push_back(taste[i]);
  vector<int> all;
  for (int t = 1; t <= 100; t++) {
    if (!val[t].empty()) {
      sort(val[t].begin(), val[t].end(), greater<int>());
      int sum = val[t].front();
      for (int i = 1; i < (int) val[t].size() && val[t][i] > 0; i++)
        sum += val[t][i];
      all.push_back(sum);
    }
  }
  sort(all.begin(), all.end(), greater<int>());
  int res = 0, sum = 0;
  for (int i = 0; i < (int) all.size(); i++) {
    sum += all[i];
    res = max(res, (i + 1) * sum);
  }
  return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector<int> p0, vector<int> p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}";
  cout << "]" << endl;
  AlienAndHamburgers *obj;
  int answer;
  obj = new AlienAndHamburgers();
  clock_t startTime = clock();
  answer = obj->getNumber(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
#ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
#endif

  bool all_right;
  all_right = true;

  vector<int> p0;
  vector<int> p1;
  int p2;

  {
    // ----- test 0 -----
    int t0[] = { 1, 2 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = { 4, 7 };
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 22;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = { 1, 1 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = { -1, -1 };
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = { 1, 2, 3 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = { 7, 4, -1 };
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 30;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = { 1, 2, 3, 2, 3, 1, 3, 2, 3, 1, 1, 1 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = { 1, 7, -2, 3, -4, -1, 3, 1, 3, -5, -1, 0 };
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 54;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = { 30, 20, 10 };
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = { 100000, -100000, 100000 };
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 400000;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// 
// Alien Fred wants to destroy the Earth.
// But before he does that, he wants to eat some hamburgers.
// 
// 
// 
// 
// You are given two vector <int>s: type and taste.
// They describe all hamburgers available in the shop he found.
// Each hamburger has a type (some positive integer) and a taste (some, possibly negative, integer).
// For each i, type[i] represents the type of i-th hamburger (0-based index), and taste[i] represents the taste of i-th hamburger.
// It is possible that different hamburgers have the same type but a different taste.
// 
// 
// 
// 
// Fred wants to eat some subset of those hamburgers (possibly none or all of them).
// Eating the chosen hamburgers will give him some amount of joy.
// This amount can be computed as Y * A, where Y is the number of different types of hamburgers eaten, and A is their total taste.
// 
// 
// 
// 
// Return the largest possible amount of joy he can get.
// 
// 
// DEFINITION
// Class:AlienAndHamburgers
// Method:getNumber
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int getNumber(vector <int> type, vector <int> taste)
// 
// 
// CONSTRAINTS
// -type will contain between 1 and 50 elements, inclusive.
// -type and taste will contain the same number of elements.
// -Each element of type will be between 1 and 100, inclusive.
// -Each element of taste will be between -100,000 and 100,000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2}
// {4, 7}
// 
// Returns: 22
// 
// In this case, the best choice is to choose both hamburgers. The number of different types is 2, and the total taste is 11. Thus, the answer is 2*11 = 22.
// 
// 1)
// {1, 1}
// {-1, -1}
// 
// Returns: 0
// 
// Note that sometimes the best choice is not to eat any hamburgers. In such a case the amount of joy is 0.
// 
// 2)
// {1, 2, 3}
// {7, 4, -1}
// 
// Returns: 30
// 
// 
// 
// 3)
// {1, 2, 3, 2, 3, 1, 3, 2, 3, 1, 1, 1}
// {1, 7, -2, 3, -4, -1, 3, 1, 3, -5, -1, 0}
// 
// Returns: 54
// 
// 
// 
// 4)
// {30, 20, 10}
// {100000, -100000, 100000}
// 
// Returns: 400000
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
