/* Solved
 * SRM 605 Div1 Medium
 * Author: Andy Y.F. Huang (azneye)
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

struct AlienAndSetDiv1 {
  int getNumber(int N, int K);
};

const int mod = 1000000007;
int dp[111][55][1024]; //last added, number A, last K-1 mask

void add(int& a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}

int AlienAndSetDiv1::getNumber(int N, int K) {
  memset(dp, 0, sizeof(dp));
  if (K > N)
    return 0;
  const int REM = 1 << (K - 1);
  dp[K][K][0] = dp[K][0][REM - 1] = 1;
  for (int i = K + 1; i <= N + N; i++) {
    for (int a = 0; a <= N; a++) {
      const int b = i - a - 1;
      if (b < 0)
        continue;
      for (int m = 0; m < REM; m++) {
        if (!dp[i - 1][a][m])
          continue;
        int cnta = 0, cntb = 0;
        for (int j = 0; j < K - 1; j++)
          if (1 << j & m)
            cntb++;
          else
            cnta++;
        //add to a
        if (a + 1 <= N && (a + 1 <= b - cntb || a + 1 > b))
          add(dp[i][a + 1][(m << 1) & (REM - 1)], dp[i - 1][a][m]);
        //add to b
        if (b + 1 <= N && (b + 1 <= a - cnta || b + 1 > a))
          add(dp[i][a][(m << 1 | 1) & (REM - 1)], dp[i - 1][a][m]);
      }
    }
  }
  int res = 0;
  for (int m = 0; m < REM; m++)
    add(res, dp[N + N][N][m]);
  return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	AlienAndSetDiv1 *obj;
	int answer;
	obj = new AlienAndSetDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
#ifdef AZN
freopen("output.txt", "w", stdout);
freopen("azn.txt", "w", stderr);
#endif

	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	p2 = 20;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 2;
	p2 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 7;
	p2 = 40;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 10;
	all_right = KawigiEdit_RunTest(4, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Alien Fred wants to destroy the Earth.
// But before he does that, he wants to solve the following problem.
// 
// 
// 
// 
// He has the set {1, 2, 3, ..., 2N}.
// He wants to split this set into two new sets A and B.
// The following conditions must all be satisfied:
// 
// Each element of the original set must belong to exactly one of the sets A and B.
// The two new sets must have the same size. (I.e., each of them must contain exactly N numbers.)
// For each i from 1 to N, inclusive: 
//     Let A[i] be the i-th smallest element of A, and let B[i] be the i-th smallest element of B.
//     The difference |A[i] - B[i]| must be greater than or equal to K.
// 
// 
// 
// 
// 
// You are given the two ints N and K.
// Let X be the total number of ways in which Fred can choose the sets A and B.
// Return the value (X modulo 1,000,000,007).
// 
// 
// DEFINITION
// Class:AlienAndSetDiv1
// Method:getNumber
// Parameters:int, int
// Returns:int
// Method signature:int getNumber(int N, int K)
// 
// 
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -K will be between 1 and 10, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 2
// 
// Returns: 2
// 
// The initial set is {1, 2, 3, 4}.
// The following 6 pairs of subsets are possible in this case:
// 
// 
// A={1, 2} and B={3, 4}
// 
// 
// A={1, 3} and B={2, 4}
// 
// 
// A={1, 4} and B={2, 3}
// 
// 
// A={2, 3} and B={1, 4}
// 
// 
// A={2, 4} and B={1, 3}
// 
// 
// A={3, 4} and B={1, 2}
// 
// 
// The first option and the last option are both valid.
// The other 4 options are invalid.
// 
// 
// Note that order of the two sets matters: the option A={1,2} and B={3,4} differs from the option A={3,4} and B={1,2}.
// 
// 1)
// 3
// 1
// 
// Returns: 20
// 
// 
// 
// 2)
// 4
// 2
// 
// Returns: 14
// 
// 
// 
// 3)
// 10
// 7
// 
// Returns: 40
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
