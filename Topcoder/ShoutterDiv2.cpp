/* Solved
 * SRM 580 Div2 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

struct ShoutterDiv2 {
  int count(vector <int> s, vector <int> t);
} ;

int ShoutterDiv2::count(vector <int> s, vector <int> t) {
  int len = s.size();
  int res = 0;
  for (int i = 0; i < len; i++)
    for (int j = i + 1; j < len; j++)
      if (min(t[i], t[j]) - max(s[i], s[j]) >= 0)
        res++;
  return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof

bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}";
  cout << "]" << endl;
  ShoutterDiv2 *obj;
  int answer;
  obj = new ShoutterDiv2();
  clock_t startTime = clock();
  answer = obj->count(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  }
  else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  }
  else if (hasAnswer) {
    cout << "Match :-)" << endl;
  }
  else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}

int main() {
  #ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
  #endif

  bool all_right;
  all_right = true;

  vector <int> p0;
  vector <int> p1;
  int p2;

  {
    // ----- test 0 -----
    int t0[] = {1, 2, 4};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {3, 4, 6};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = {0};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {100};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 0;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = {0, 0, 0};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {1, 1, 1};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 3;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = {9, 26, 8, 35, 3, 58, 91, 24, 10, 26, 22, 18, 15, 12, 15, 27, 15, 60, 76, 19, 12, 16, 37, 35, 25, 4, 22, 47, 65, 3, 2, 23, 26, 33, 7, 11, 34, 74, 67, 32, 15, 45, 20, 53, 60, 25, 74, 13, 44, 51};
    p0.assign(t0, t0 + sizeof (t0) / sizeof (t0[0]));
    int t1[] = {26, 62, 80, 80, 52, 83, 100, 71, 20, 73, 23, 32, 80, 37, 34, 55, 51, 86, 97, 89, 17, 81, 74, 94, 79, 85, 77, 97, 87, 8, 70, 46, 58, 70, 97, 35, 80, 76, 82, 80, 19, 56, 65, 62, 80, 49, 79, 28, 75, 78};
    p1.assign(t1, t1 + sizeof (t1) / sizeof (t1[0]));
    p2 = 830;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  }
  else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// A group of freshman rabbits has recently joined the Eel club.
// No two of the rabbits knew each other.
// Today, each of the rabbits went to the club for the first time.
// You are given vector <int>s s and t with the following meaning:
// For each i, rabbit number i entered the club at the time s[i] and left the club at the time t[i].
//
// Each pair of rabbits that was in the club at the same time got to know each other, and they became friends on the social network service Shoutter.
// This is also the case for rabbits who just met for a single moment (i.e., one of them entered the club exactly at the time when the other one was leaving).
//
// Compute and return the number of pairs of rabbits that became friends today.
//
// DEFINITION
// Class:ShoutterDiv2
// Method:count
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int count(vector <int> s, vector <int> t)
//
//
// CONSTRAINTS
// -s and t will contain between 1 and 50 integers, inclusive.
// -s and t will contain the same number of elements.
// -Each integer in s and t will be between 0 and 100, inclusive.
// -For each i, t[i] will be greater than or equal to s[i].
//
//
// EXAMPLES
//
// 0)
// {1, 2, 4}
// {3, 4, 6}
//
// Returns: 2
//
// Rabbit 0 and Rabbit 1 will be friends because both of them are in the club between time 2 and 3.
//
// Rabbit 0 and Rabbit 2 won't be friends because Rabbit 0 will leave the club before Rabbit 2 enters the club.
//
// Rabbit 1 and Rabbit 2 will be friends because both of them are in the club at time 4.
//
//
//
// 1)
// {0}
// {100}
//
// Returns: 0
//
//
//
// 2)
// {0,0,0}
// {1,1,1}
//
// Returns: 3
//
//
//
// 3)
// {9,26,8,35,3,58,91,24,10,26,22,18,15,12,15,27,15,60,76,19,12,16,37,35,25,4,22,47,65,3,2,23,26,33,7,11,34,74,67,32,15,45,20,53,60,25,74,13,44,51}
// {26,62,80,80,52,83,100,71,20,73,23,32,80,37,34,55,51,86,97,89,17,81,74,94,79,85,77,97,87,8,70,46,58,70,97,35,80,76,82,80,19,56,65,62,80,49,79,28,75,78}
//
// Returns: 830
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
