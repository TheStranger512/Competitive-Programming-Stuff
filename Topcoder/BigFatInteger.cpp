/* Solved
 * SRM 599 Div1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;

struct BigFatInteger {
  int minOperations(int A, int B);
};

int BigFatInteger::minOperations(int A, int B) {
  int high = 0, res = 0;
  for (int t = A, i = 2; i <= t; i++) {
    if (t % i == 0) {
      int cnt = 0;
      while (t % i == 0)
        t /= i, cnt++;
      res++;
      high = max(high, cnt);
    }
  }
  const int ex = high * B;
  for (int i = 1; i < ex; i <<= 1)
    res++;
  return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1;
  cout << "]" << endl;
  BigFatInteger *obj;
  int answer;
  obj = new BigFatInteger();
  clock_t startTime = clock();
  answer = obj->minOperations(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
#ifdef AZN
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
#endif

  bool all_right;
  all_right = true;

  int p0;
  int p1;
  int p2;

  {
    // ----- test 0 -----
    p0 = 6;
    p1 = 1;
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 162;
    p1 = 1;
    p2 = 4;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 999983;
    p1 = 9;
    p2 = 5;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 360;
    p1 = 8;
    p2 = 8;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// PROBLEM STATEMENT
// This problem statement contains superscipts that may not display properly outside the applet.
// 
// Lun the dog loves very large integers. Her favorite is AB (A to the power of B).
// 
// 
// She has an integer variable X. Initially, the value of X is set to 1. She can perform the following two kinds of operations in any order, any number of times.
// 
// Operation 1: choose a prime number p, then multiply X by p.
// Operation 2: choose a positive divisor d of the value of X at that point, then multiply X by d.
// 
// 
// 
// You are given two ints A and B. Return the minimum number of operations Lun needs to perform
// in order to obtain X = AB from the initial state X = 1.
// 
// DEFINITION
// Class:BigFatInteger
// Method:minOperations
// Parameters:int, int
// Returns:int
// Method signature:int minOperations(int A, int B)
// 
// 
// CONSTRAINTS
// -A will be between 2 and 1,000,000 (106), inclusive.
// -B will be between 1 and 1,000,000 (106), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 6
// 1
// 
// Returns: 2
// 
// Here, AB = 61 = 6. Here is one of the optimal sequences of operations:
// 
// Perform operation 1 by choosing p=2. X is now 1*2 = 2.
// Perform operation 1 by choosing p=3. X is now 2*3 = 6.
// 
// 
// 1)
// 162
// 1
// 
// Returns: 4
// 
// One of the optimal sequences of operations:
// 
// Perform operation 1 by choosing p=3. X is now 1*3 = 3.
// Perform operation 1 by choosing p=3. X is now 3*3 = 9.
// Perform operation 2 by choosing d=9. X is now 9*9 = 81.
// Perform operation 1 by choosing p=2. X is now 81*2 = 162.
// 
// 
// 2)
// 999983
// 9
// 
// Returns: 5
// 
// Here, A is prime. One of the optimal sequences of operations:
// 
// Perform operation 1 by choosing p=A. X is now A.
// Perform operation 1 by choosing p=A. X is now A2.
// Perform operation 1 by choosing p=A. X is now A3.
// Perform operation 2 by choosing d=A3. X is now A6.
// Perform operation 2 by choosing d=A3. X is now A9.
// 
// 
// 3)
// 360
// 8
// 
// Returns: 8
// 
// 
// 
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
