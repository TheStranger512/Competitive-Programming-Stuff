/* Solved
 * SRM 581 Div1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

struct SurveillanceSystem {
	string getContainerInfo(string containers, vector <int> reports, int L);
};

int len, cams, posscnt;
int st[55], ed[55], cnt[55];
bool used[55], have[55];
int need[55];

bool go() {
  for (int c = 0; c < cams; c++) {
    if (have[c]) continue;
    for (int i = 0; i < posscnt; i++)
      if (!used[i] && cnt[i] == need[c]) {
        have[c] = used[i] = true;
        break;
      }
    if (!have[c]) return false;
  }
  return true;
}

string SurveillanceSystem::getContainerInfo(string containers, vector <int> reports, int L) {
	len = containers.size();
  cams = reports.size();
  posscnt = len - L + 1;
  for (int i = 0; i < cams; i++)
    need[i] = reports[i];
  for (int i = 0; i < posscnt; i++) {
    st[i] = i;
    ed[i] = i + L - 1;
    cnt[i] = count(containers.begin() + i, containers.begin() + i + L, 'X');
  }
  //plnarr(cnt, cnt + posscnt);
  string ans = "";
  for (int by = 0; by < len; by++) {
    bool can = false;
    for (int i = 0; i < posscnt && !can; i++) {
      if (by < st[i] || by > ed[i]) continue;
      memset(have, false, sizeof (have));
      memset(used, false, sizeof (used));
      for (int c = 0; c < cams; c++) {
        if (cnt[i] == need[c]) {
          used[i] = have[c] = true;
          break;
        }
      }
      if (used[i] && go())
        can = true;
      used[i] = false;
    }
    memset(have, false, sizeof (have));
    memset(used, false, sizeof (used));
    for (int i = 0; i < posscnt; i++)
      if (st[i] <= by && by <= ed[i])
        used[i] = true;
    bool cannot = go();
    if (can && cannot) ans += '?';
    else if (can) ans += '+';
    else ans += '-';
  }
  return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	SurveillanceSystem *obj;
	string answer;
	obj = new SurveillanceSystem();
	clock_t startTime = clock();
	answer = obj->getContainerInfo(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
#ifdef AZN
freopen("output.txt", "w", stdout);
freopen("azn.txt", "w", stderr);
#endif

	bool all_right;
	all_right = true;

	string p0;
	vector <int> p1;
	int p2;
	string p3;

	{
	// ----- test 0 -----
	p0 = "-X--XX";
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?++++";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "-XXXXX-";
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?" "?";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "------X-XX-";
	int t1[] = {3,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = "++++++++++?";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "-XXXXX---X--";
	int t1[] = {2,1,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?++++?" "?";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "-XX--X-XX-X-X--X---XX-X---XXXX-----X";
	int t1[] = {3,3,3,3,3,3,3,3,3,3,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = "?" "?" "?++++?++++++++++++++++++++?" "?" "?" "?" "?" "?--";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a long narrow storehouse.
// The storehouse is divided into a sequence of N identical sectors, labeled 0 through N-1.
// Each sector is large enough to contain a single container.
// Currently, some sectors are empty and some sectors are filled by containers.
// The storehouse also contains a surveillance system that is described below.
//
// We are going to break into the storehouse.
// As a part of preparation for the heist, we already found out some information about the warehouse.
// In particular, we know exactly how the containers are currently placed in the warehouse.
// You are given a string containers consisting of N characters.
// For each i, character i of containers is 'X' if sector i contains a container, and it is '-' if sector i is empty.
//
// We also discovered some information about the surveillance system.
// The system consists of several hidden cameras.
// You are given a int L with the following meaning:
// Each of the cameras monitors exactly L consecutive sectors.
// The segments of sectors monitored by different cameras might overlap, but no two cameras watch exactly the same segment.
// (In other words, each sector may be monitored by multiple cameras, but each camera monitors a different set of consecutive sectors.)
//
// Finally, we know something about what the cameras currently see.
// You are given a vector <int> reports.
// Each element of reports corresponds to one of the cameras (in no particular order).
// More precisely, reports[i] is the number of containers stored in the sectors monitored by the corresponding camera.
//
// It is guaranteed that all our information is correct and consistent.
//
// Your task is to use the provided information to deduce which sectors are monitored by at least one surveillance camera.
// Return a string containing N characters.
// For each i, character i of the return value should be one of '+', '?', and '-'.
// Character '+' represents that sector i is certainly monitored by at least one camera.
// Character '-' represents that sector i is certainly not monitored by any of the cameras.
// Character '?' represents the remaining case: given the information we have, it is possible that sector i is monitored, but it is also possible that it is not monitored.
//
// DEFINITION
// Class:SurveillanceSystem
// Method:getContainerInfo
// Parameters:string, vector <int>, int
// Returns:string
// Method signature:string getContainerInfo(string containers, vector <int> reports, int L)
//
//
// CONSTRAINTS
// -containers will contain N elements, where N is between 1 and 50, inclusive.
// -Each character in containers will be either 'X' or '-'.
// -L will be between 1 and N, inclusive.
// -reports will contain between 1 and N-L+1 elements, inclusive.
// -Each element of reports will be between 0 and L, inclusive.
// -The given information will be consistent.
//
//
// EXAMPLES
//
// 0)
// "-X--XX"
// {1, 2}
// 3
//
// Returns: "??++++"
//
// This storehouse has 6 sectors.
// There are containers in sectors 1, 4, and 5.
// There are two cameras: camera #0 monitors 1 container, and camera #1 monitors 2 containers.
// Clearly, camera #1 must be watching sectors 3, 4, and 5.
// Camera #0 may be watching sectors (0, 1, 2), (1, 2, 3), or (2, 3, 4).
// Thus, camera #0 is surely monitoring sector 2.
// Sectors 0 and 1 may or may not be monitored.
//
// 1)
// "-XXXXX-"
// {2}
// 3
//
// Returns: "???-???"
//
// The camera is monitoring either the leftmost or the rightmost segment, thus the middle sector is surely not under surveillance.
//
// 2)
// "------X-XX-"
// {3, 0, 2, 0}
// 5
//
// Returns: "++++++++++?"
//
// We can deduce that cameras #1 and #3 are watching segments (0, 1, 2, 3, 4) and (1, 2, 3, 4, 5). Camera #2 is monitoring the segment (4, 5, 6, 7, 8), since this is the only segment with two occupied sectors. Camera #0 is either watching (5, 6, 7, 8, 9) or (6, 7, 8, 9, 10), thus the rightmost sector might have slipped from the surveillance.
//
// 3)
// "-XXXXX---X--"
// {2, 1, 0, 1}
// 3
//
// Returns: "???-??++++??"
//
//
//
// 4)
// "-XX--X-XX-X-X--X---XX-X---XXXX-----X"
// {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
// 7
//
// Returns: "???++++?++++++++++++++++++++??????--"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
