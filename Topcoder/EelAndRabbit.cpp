/* Solved
 * SRM 580 Div1 Easy/Div2 Medium
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

struct EelAndRabbit {
	int getmax(vector <int> l, vector <int> t);
};

pair<int, int> seq[55];
int vals[111];
int len, vallen;
bool yes[55];

int get(int x) {
  return lower_bound(vals, vals + vallen, x) - vals;
}

int EelAndRabbit::getmax(vector <int> l, vector <int> t) {
  len = l.size();
  for (int i = 0; i < len; i++) {
    seq[i].first = t[i];
    seq[i].second = t[i] + l[i];
    vals[i << 1] = seq[i].first;
    vals[i << 1 | 1] = seq[i].second;
  }
  sort(vals, vals + len + len);
  vallen = unique(vals, vals + len + len) - vals;
  for (int i = 0; i < len; i++) {
    seq[i].first = get(seq[i].first);
    seq[i].second = get(seq[i].second);
  }
  int res = 0;
  for (int a = 0; a < vallen; a++) {
    for (int b = a + 1; b < vallen; b++) {
      memset(yes, false, sizeof (yes));
      for (int i = 0; i < len; i++)
        if ((seq[i].first <= a && a <= seq[i].second)
                || (seq[i].first <= b && b <= seq[i].second) )
          yes[i] = true;
      res = max(res, count(yes, yes + len, true));
    }
  }
  return res;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	EelAndRabbit *obj;
	int answer;
	obj = new EelAndRabbit();
	clock_t startTime = clock();
	answer = obj->getmax(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
#ifdef AZN
freopen("output.txt", "w", stdout);
freopen("azn.txt", "w", stderr);
#endif

	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {2,4,3,2,2,1,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,6,3,7,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {8,2,1,10,8,6,3,1,2,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {17,27,26,11,1,27,23,12,11,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {201658970,954764112,698299234,529669741,969010229,723519536,270009622,90456081,320654596,90465823,973556430,827897724,618755284,261043034,38008523,672562800,292327773,425827617,921906343,335124765,825416868,928355021,236334831,455096393,581502934,732375411,305852197,690720293,929444194,42797695,639814529,425411488,519100442,329710726,443462315,875754712,468255192,882787399,452635213,140260848,65877756,844545154,381437458,56706159,672763068,594609711,933970330,470890997,64204558,189972796 };
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {32044612,126104866,455118254,199740762,817269745,804954102,756281769,46448211,846099037,88808462,686382376,122395895,199484684,19921030,791567133,769319210,866301373,325482879,255173234,805327608,300524169,318923712,578595375,318167795,8339294,330761256,524576604,442946936,513421013,684472209,263948237,338439546,493180937,490708912,142848565,81732392,956415301,66796346,392132153,586246305,295646874,90511669,472929928,630497925,234939278,94681414,485669600,690558968,585410720,783977077 };
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, false, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Rabbit went to a river to catch eels.
// All eels are currently swimming down the stream at the same speed.
// Rabbit is standing by the river, downstream from all the eels.
//
//
// Each point on the river has a coordinate.
// The coordinates increase as we go down the stream.
// Initially, Rabbit is standing at the origin, and all eels have non-positive coordinates.
//
//
// You are given two vector <int>s: l and t.
// These describe the current configuration of eels.
// The speed of each eel is 1 (one).
// For each i, the length of eel number i is l[i].
// The head of eel number i will arrive at the coordinate 0 precisely at the time t[i].
// Therefore, at any time T the eel number i has its head at the coordinate T-t[i], and its tail at the coordinate T-t[i]-l[i].
//
//
// Rabbit may only catch an eel when some part of the eel (between head and tail, inclusive) is at the same coordinate as the rabbit.
// Rabbit can catch eels at most twice.
// Each time he decides to catch eels, he may catch as many of the currently available eels as he wants.
// (That is, he can only catch eels that are in front of him at that instant, and he is allowed and able to catch multiple eels at once.)
//
//
// Return the maximal total number of eels Rabbit can catch.
//
// DEFINITION
// Class:EelAndRabbit
// Method:getmax
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int getmax(vector <int> l, vector <int> t)
//
//
// CONSTRAINTS
// -l will contain between 1 and 50 elements, inclusive.
// -Each element of l will be between 1 and 1,000,000,000, inclusive.
// -l and t will contain the same number of elements.
// -Each element of t will be between 0 and 1,000,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {2, 4, 3, 2, 2, 1, 10}
// {2, 6, 3, 7, 0, 2, 0}
//
// Returns: 6
//
// Rabbit can catch 6 eels in the following way:
//
// At time 2, catch Eel 0, Eel 4, Eel 5, and Eel 6.
// At time 8, catch Eel 1 and Eel 3.
//
//
//
// 1)
// {1, 1, 1}
// {2, 0, 4}
//
// Returns: 2
//
// No two eels are in front of Rabbit at the same time, so Rabbit can catch at most two eels.
//
// 2)
// {1}
// {1}
//
// Returns: 1
//
//
//
// 3)
// {8, 2, 1, 10, 8, 6, 3, 1, 2, 5}
// {17, 27, 26, 11, 1, 27, 23, 12, 11, 13}
//
// Returns: 7
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
