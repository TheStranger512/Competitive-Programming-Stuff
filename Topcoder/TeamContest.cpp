/*
 * Solved
 * SRM 573 Div1 Easy
 * Author: Andy Y.F. Huang
 */
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#endif

using namespace std;

struct TeamContest {
  int worstRank(vector <int> strength);
} ;

#define SIZE(x) ((int)x.size())

int min3(int a, int b, int c) {
  return min(a, min(b, c));
}

int max3(int a, int b, int c) {
  return max(a, max(b, c));
}

int get(int a, int b, int c) {
  return max3(a, b, c) + min3(a, b, c);
}

int TeamContest::worstRank(vector <int> str) {
  int our = get(str[0], str[1], str[2]);
  for (int i = 0; i < 3; i++)
    str.erase(str.begin());
  sort(str.begin(), str.end());
  int res = 0;
  while (!str.empty()) {
    int high = str.back();
    str.pop_back();
    int i = 0;
    while (i < SIZE(str) && str[i] + high <= our)
      i++;
    if (i >= SIZE(str) - 1)
      break;
    str.erase(str.begin() + i);
    str.erase(str.begin() + i);
    res++;
  }
  return res + 1;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TeamContest *obj;
	int answer;
	obj = new TeamContest();
	clock_t startTime = clock();
	answer = obj->worstRank(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
#ifdef AZN
freopen("output.txt", "w", stdout);
freopen("azn.txt", "w", stderr);
#endif

	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {5,7,3,5,7,3,5,7,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {5,7,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {3,9,4,6,2,6,1,6,9,1,4,1,3,8,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {53,47,88,79,99,75,28,54,65,14,22,13,11,31,43};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {1,2,3,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Your university is holding a programming competition and your team is going to compete.
//
// There are 3*N students in the university. They are numbered from 0 to 3*N-1. Each student has a certain strength which is a positive integer that characterizes his/her programming skills. You are given a vector <int> strength. The strength of student i is equal to strength[i].
//
// Your team will consist of students 0, 1 and 2. Other 3*N-3 students will form N-1 more teams so that each team has exactly 3 members. The exact composition of other teams is not known yet. Each team has a strength that is calculated as follows: if it consists of members with strengths X, Y and Z, then the team's strength is equal to max{X, Y, Z} + min{X, Y, Z}.
//
// You are interested how your team will rank by strength among the other teams. Formally, the rank of your team is defined as 1 + (the number of other teams that have a strictly greater strength than the strength of your team).
//
// Return the maximum possible rank that your team may have after all students split into teams.
//
// DEFINITION
// Class:TeamContest
// Method:worstRank
// Parameters:vector <int>
// Returns:int
// Method signature:int worstRank(vector <int> strength)
//
//
// CONSTRAINTS
// -strength will contain between 3 and 48 elements, inclusive.
// -The number of elements in strength will be divisible by 3.
// -Each element of strength will be between 1 and 1,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {5, 7, 3, 5, 7, 3, 5, 7, 3}
//
// Returns: 2
//
// The strength of your team is max{5, 7, 3} + min{5, 7, 3} = 10. It is possible that one of the other teams will be stronger than your team. For example, if it consists of students with strengths 5, 7 and 7, then its strength will be 12. However, it is not possible that both other teams will be stronger than your team.
//
//
// 1)
// {5, 7, 3}
//
//
// Returns: 1
//
// Just your team. No rivals.
//
// 2)
// {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
//
// Returns: 1
//
// All teams (including yours) will have the same strength: 2.
//
// 3)
// {3,9,4,6,2,6,1,6,9,1,4,1,3,8,5}
//
//
// Returns: 3
//
//
//
// 4)
// {53,47,88,79,99,75,28,54,65,14,22,13,11,31,43}
//
//
// Returns: 3
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
